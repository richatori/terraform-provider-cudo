// Code generated by go-swagger; DO NOT EDIT.

package object_storage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new object storage API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for object storage API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	Activate(params *ActivateParams, opts ...ClientOption) (*ActivateOK, error)

	CreateObjectStorageUser(params *CreateObjectStorageUserParams, opts ...ClientOption) (*CreateObjectStorageUserOK, error)

	DeleteObjectStorageKey(params *DeleteObjectStorageKeyParams, opts ...ClientOption) (*DeleteObjectStorageKeyOK, error)

	DeleteObjectStorageUser(params *DeleteObjectStorageUserParams, opts ...ClientOption) (*DeleteObjectStorageUserOK, error)

	GenerateObjectStorageKey(params *GenerateObjectStorageKeyParams, opts ...ClientOption) (*GenerateObjectStorageKeyOK, error)

	GetObjectStorageBucket(params *GetObjectStorageBucketParams, opts ...ClientOption) (*GetObjectStorageBucketOK, error)

	GetObjectStorageSessionKey(params *GetObjectStorageSessionKeyParams, opts ...ClientOption) (*GetObjectStorageSessionKeyOK, error)

	ListObjectStorageBuckets(params *ListObjectStorageBucketsParams, opts ...ClientOption) (*ListObjectStorageBucketsOK, error)

	ListObjectStorageKeys(params *ListObjectStorageKeysParams, opts ...ClientOption) (*ListObjectStorageKeysOK, error)

	ListObjectStorageUsers(params *ListObjectStorageUsersParams, opts ...ClientOption) (*ListObjectStorageUsersOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
Activate allows the use of s3 compatible storage in a project
*/
func (a *Client) Activate(params *ActivateParams, opts ...ClientOption) (*ActivateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewActivateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Activate",
		Method:             "POST",
		PathPattern:        "/v1/projects/{projectId}/object-storage/activate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ActivateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ActivateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ActivateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateObjectStorageUser creates user that stores keys for storage buckets
*/
func (a *Client) CreateObjectStorageUser(params *CreateObjectStorageUserParams, opts ...ClientOption) (*CreateObjectStorageUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateObjectStorageUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateObjectStorageUser",
		Method:             "POST",
		PathPattern:        "/v1/projects/{projectId}/object-storage/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateObjectStorageUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateObjectStorageUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateObjectStorageUserDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteObjectStorageKey deletes object storage user
*/
func (a *Client) DeleteObjectStorageKey(params *DeleteObjectStorageKeyParams, opts ...ClientOption) (*DeleteObjectStorageKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteObjectStorageKeyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteObjectStorageKey",
		Method:             "POST",
		PathPattern:        "/v1/projects/{projectId}/object-storage/users/{id}/keys",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteObjectStorageKeyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteObjectStorageKeyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteObjectStorageKeyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteObjectStorageUser deletes object storage user
*/
func (a *Client) DeleteObjectStorageUser(params *DeleteObjectStorageUserParams, opts ...ClientOption) (*DeleteObjectStorageUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteObjectStorageUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteObjectStorageUser",
		Method:             "DELETE",
		PathPattern:        "/v1/projects/{projectId}/object-storage/users/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteObjectStorageUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteObjectStorageUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteObjectStorageUserDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GenerateObjectStorageKey generates access key for storage buckets
*/
func (a *Client) GenerateObjectStorageKey(params *GenerateObjectStorageKeyParams, opts ...ClientOption) (*GenerateObjectStorageKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGenerateObjectStorageKeyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GenerateObjectStorageKey",
		Method:             "POST",
		PathPattern:        "/v1/projects/{projectId}/object-storage/users/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GenerateObjectStorageKeyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GenerateObjectStorageKeyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GenerateObjectStorageKeyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetObjectStorageBucket gets details for a bucket
*/
func (a *Client) GetObjectStorageBucket(params *GetObjectStorageBucketParams, opts ...ClientOption) (*GetObjectStorageBucketOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetObjectStorageBucketParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetObjectStorageBucket",
		Method:             "GET",
		PathPattern:        "/v1/projects/{projectId}/object-storage/buckets/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetObjectStorageBucketReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetObjectStorageBucketOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetObjectStorageBucketDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetObjectStorageSessionKey generates temporary key for storage bucket access
*/
func (a *Client) GetObjectStorageSessionKey(params *GetObjectStorageSessionKeyParams, opts ...ClientOption) (*GetObjectStorageSessionKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetObjectStorageSessionKeyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetObjectStorageSessionKey",
		Method:             "GET",
		PathPattern:        "/v1/projects/{projectId}/object-storage/session-key",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetObjectStorageSessionKeyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetObjectStorageSessionKeyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetObjectStorageSessionKeyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListObjectStorageBuckets lists buckets
*/
func (a *Client) ListObjectStorageBuckets(params *ListObjectStorageBucketsParams, opts ...ClientOption) (*ListObjectStorageBucketsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListObjectStorageBucketsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListObjectStorageBuckets",
		Method:             "GET",
		PathPattern:        "/v1/projects/{projectId}/object-storage/buckets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListObjectStorageBucketsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListObjectStorageBucketsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListObjectStorageBucketsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListObjectStorageKeys lists storage user keys
*/
func (a *Client) ListObjectStorageKeys(params *ListObjectStorageKeysParams, opts ...ClientOption) (*ListObjectStorageKeysOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListObjectStorageKeysParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListObjectStorageKeys",
		Method:             "GET",
		PathPattern:        "/v1/projects/{projectId}/object-storage/users/{id}/keys",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListObjectStorageKeysReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListObjectStorageKeysOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListObjectStorageKeysDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListObjectStorageUsers lists storage users
*/
func (a *Client) ListObjectStorageUsers(params *ListObjectStorageUsersParams, opts ...ClientOption) (*ListObjectStorageUsersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListObjectStorageUsersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListObjectStorageUsers",
		Method:             "GET",
		PathPattern:        "/v1/projects/{projectId}/object-storage/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListObjectStorageUsersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListObjectStorageUsersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListObjectStorageUsersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
