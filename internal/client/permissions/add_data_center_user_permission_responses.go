// Code generated by go-swagger; DO NOT EDIT.

package permissions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/CudoVentures/terraform-provider-cudo/internal/models"
)

// AddDataCenterUserPermissionReader is a Reader for the AddDataCenterUserPermission structure.
type AddDataCenterUserPermissionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddDataCenterUserPermissionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAddDataCenterUserPermissionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewAddDataCenterUserPermissionDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewAddDataCenterUserPermissionOK creates a AddDataCenterUserPermissionOK with default headers values
func NewAddDataCenterUserPermissionOK() *AddDataCenterUserPermissionOK {
	return &AddDataCenterUserPermissionOK{}
}

/*
AddDataCenterUserPermissionOK describes a response with status code 200, with default header values.

A successful response.
*/
type AddDataCenterUserPermissionOK struct {
	Payload interface{}
}

// IsSuccess returns true when this add data center user permission o k response has a 2xx status code
func (o *AddDataCenterUserPermissionOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this add data center user permission o k response has a 3xx status code
func (o *AddDataCenterUserPermissionOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add data center user permission o k response has a 4xx status code
func (o *AddDataCenterUserPermissionOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this add data center user permission o k response has a 5xx status code
func (o *AddDataCenterUserPermissionOK) IsServerError() bool {
	return false
}

// IsCode returns true when this add data center user permission o k response a status code equal to that given
func (o *AddDataCenterUserPermissionOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the add data center user permission o k response
func (o *AddDataCenterUserPermissionOK) Code() int {
	return 200
}

func (o *AddDataCenterUserPermissionOK) Error() string {
	return fmt.Sprintf("[POST /v1/data-centers/{dataCenterId}/add-user-permission][%d] addDataCenterUserPermissionOK  %+v", 200, o.Payload)
}

func (o *AddDataCenterUserPermissionOK) String() string {
	return fmt.Sprintf("[POST /v1/data-centers/{dataCenterId}/add-user-permission][%d] addDataCenterUserPermissionOK  %+v", 200, o.Payload)
}

func (o *AddDataCenterUserPermissionOK) GetPayload() interface{} {
	return o.Payload
}

func (o *AddDataCenterUserPermissionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddDataCenterUserPermissionDefault creates a AddDataCenterUserPermissionDefault with default headers values
func NewAddDataCenterUserPermissionDefault(code int) *AddDataCenterUserPermissionDefault {
	return &AddDataCenterUserPermissionDefault{
		_statusCode: code,
	}
}

/*
AddDataCenterUserPermissionDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type AddDataCenterUserPermissionDefault struct {
	_statusCode int

	Payload *models.Status
}

// IsSuccess returns true when this add data center user permission default response has a 2xx status code
func (o *AddDataCenterUserPermissionDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this add data center user permission default response has a 3xx status code
func (o *AddDataCenterUserPermissionDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this add data center user permission default response has a 4xx status code
func (o *AddDataCenterUserPermissionDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this add data center user permission default response has a 5xx status code
func (o *AddDataCenterUserPermissionDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this add data center user permission default response a status code equal to that given
func (o *AddDataCenterUserPermissionDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the add data center user permission default response
func (o *AddDataCenterUserPermissionDefault) Code() int {
	return o._statusCode
}

func (o *AddDataCenterUserPermissionDefault) Error() string {
	return fmt.Sprintf("[POST /v1/data-centers/{dataCenterId}/add-user-permission][%d] AddDataCenterUserPermission default  %+v", o._statusCode, o.Payload)
}

func (o *AddDataCenterUserPermissionDefault) String() string {
	return fmt.Sprintf("[POST /v1/data-centers/{dataCenterId}/add-user-permission][%d] AddDataCenterUserPermission default  %+v", o._statusCode, o.Payload)
}

func (o *AddDataCenterUserPermissionDefault) GetPayload() *models.Status {
	return o.Payload
}

func (o *AddDataCenterUserPermissionDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Status)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
AddDataCenterUserPermissionBody add data center user permission body
swagger:model AddDataCenterUserPermissionBody
*/
type AddDataCenterUserPermissionBody struct {

	// billing account Id
	BillingAccountID string `json:"billingAccountId,omitempty"`

	// project Id
	ProjectID string `json:"projectId,omitempty"`

	// role
	// Required: true
	Role *models.Role `json:"role"`

	// user email
	// Required: true
	UserEmail *string `json:"userEmail"`
}

// Validate validates this add data center user permission body
func (o *AddDataCenterUserPermissionBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateRole(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUserEmail(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AddDataCenterUserPermissionBody) validateRole(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"role", "body", o.Role); err != nil {
		return err
	}

	if err := validate.Required("body"+"."+"role", "body", o.Role); err != nil {
		return err
	}

	if o.Role != nil {
		if err := o.Role.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "role")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "role")
			}
			return err
		}
	}

	return nil
}

func (o *AddDataCenterUserPermissionBody) validateUserEmail(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"userEmail", "body", o.UserEmail); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this add data center user permission body based on the context it is used
func (o *AddDataCenterUserPermissionBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateRole(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AddDataCenterUserPermissionBody) contextValidateRole(ctx context.Context, formats strfmt.Registry) error {

	if o.Role != nil {

		if err := o.Role.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "role")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "role")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *AddDataCenterUserPermissionBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddDataCenterUserPermissionBody) UnmarshalBinary(b []byte) error {
	var res AddDataCenterUserPermissionBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
