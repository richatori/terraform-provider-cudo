// Code generated by go-swagger; DO NOT EDIT.

package permissions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new permissions API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for permissions API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AddBillingAccountUserPermission(params *AddBillingAccountUserPermissionParams, opts ...ClientOption) (*AddBillingAccountUserPermissionOK, error)

	AddDataCenterUserPermission(params *AddDataCenterUserPermissionParams, opts ...ClientOption) (*AddDataCenterUserPermissionOK, error)

	AddProjectUserPermission(params *AddProjectUserPermissionParams, opts ...ClientOption) (*AddProjectUserPermissionOK, error)

	ListUserPermissions(params *ListUserPermissionsParams, opts ...ClientOption) (*ListUserPermissionsOK, error)

	RemoveBillingAccountUserPermission(params *RemoveBillingAccountUserPermissionParams, opts ...ClientOption) (*RemoveBillingAccountUserPermissionOK, error)

	RemoveDataCenterUserPermission(params *RemoveDataCenterUserPermissionParams, opts ...ClientOption) (*RemoveDataCenterUserPermissionOK, error)

	RemoveProjectUserPermission(params *RemoveProjectUserPermissionParams, opts ...ClientOption) (*RemoveProjectUserPermissionOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AddBillingAccountUserPermission adds billing account user
*/
func (a *Client) AddBillingAccountUserPermission(params *AddBillingAccountUserPermissionParams, opts ...ClientOption) (*AddBillingAccountUserPermissionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddBillingAccountUserPermissionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AddBillingAccountUserPermission",
		Method:             "POST",
		PathPattern:        "/v1/billing-accounts/{billingAccountId}/add-user-permission",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddBillingAccountUserPermissionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddBillingAccountUserPermissionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AddBillingAccountUserPermissionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
AddDataCenterUserPermission adds data center user
*/
func (a *Client) AddDataCenterUserPermission(params *AddDataCenterUserPermissionParams, opts ...ClientOption) (*AddDataCenterUserPermissionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddDataCenterUserPermissionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AddDataCenterUserPermission",
		Method:             "POST",
		PathPattern:        "/v1/data-centers/{dataCenterId}/add-user-permission",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddDataCenterUserPermissionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddDataCenterUserPermissionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AddDataCenterUserPermissionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
AddProjectUserPermission adds project user
*/
func (a *Client) AddProjectUserPermission(params *AddProjectUserPermissionParams, opts ...ClientOption) (*AddProjectUserPermissionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddProjectUserPermissionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AddProjectUserPermission",
		Method:             "POST",
		PathPattern:        "/v1/projects/{projectId}/add-user-permission",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddProjectUserPermissionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddProjectUserPermissionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AddProjectUserPermissionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListUserPermissions lists
*/
func (a *Client) ListUserPermissions(params *ListUserPermissionsParams, opts ...ClientOption) (*ListUserPermissionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListUserPermissionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListUserPermissions",
		Method:             "GET",
		PathPattern:        "/v1/auth/permissions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListUserPermissionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListUserPermissionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListUserPermissionsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
RemoveBillingAccountUserPermission removes billing account user
*/
func (a *Client) RemoveBillingAccountUserPermission(params *RemoveBillingAccountUserPermissionParams, opts ...ClientOption) (*RemoveBillingAccountUserPermissionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveBillingAccountUserPermissionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RemoveBillingAccountUserPermission",
		Method:             "POST",
		PathPattern:        "/v1/billing-accounts/{billingAccountId}/remove-user-permission",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RemoveBillingAccountUserPermissionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RemoveBillingAccountUserPermissionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RemoveBillingAccountUserPermissionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
RemoveDataCenterUserPermission removes data center user
*/
func (a *Client) RemoveDataCenterUserPermission(params *RemoveDataCenterUserPermissionParams, opts ...ClientOption) (*RemoveDataCenterUserPermissionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveDataCenterUserPermissionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RemoveDataCenterUserPermission",
		Method:             "POST",
		PathPattern:        "/v1/data-centers/{dataCenterId}/remove-user-permission",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RemoveDataCenterUserPermissionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RemoveDataCenterUserPermissionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RemoveDataCenterUserPermissionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
RemoveProjectUserPermission removes project user
*/
func (a *Client) RemoveProjectUserPermission(params *RemoveProjectUserPermissionParams, opts ...ClientOption) (*RemoveProjectUserPermissionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveProjectUserPermissionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RemoveProjectUserPermission",
		Method:             "POST",
		PathPattern:        "/v1/projects/{projectId}/remove-user-permission",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RemoveProjectUserPermissionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RemoveProjectUserPermissionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RemoveProjectUserPermissionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
