// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VMDataCenter VM data center
//
// swagger:model VMDataCenter
type VMDataCenter struct {

	// disk pool pricing
	DiskPoolPricing []*DiskStoragePriceHr `json:"diskPoolPricing"`

	// id
	// Required: true
	ID *string `json:"id"`

	// ipv4 price hr
	IPV4PriceHr *Decimal `json:"ipv4PriceHr,omitempty"`

	// network pricing
	NetworkPricing []*NetworkPriceHr `json:"networkPricing"`

	// region Id
	// Required: true
	RegionID *string `json:"regionId"`

	// renewable energy
	// Required: true
	RenewableEnergy *bool `json:"renewableEnergy"`

	// supplier name
	// Required: true
	SupplierName *string `json:"supplierName"`
}

// Validate validates this VM data center
func (m *VMDataCenter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDiskPoolPricing(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIPV4PriceHr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkPricing(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRenewableEnergy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSupplierName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VMDataCenter) validateDiskPoolPricing(formats strfmt.Registry) error {
	if swag.IsZero(m.DiskPoolPricing) { // not required
		return nil
	}

	for i := 0; i < len(m.DiskPoolPricing); i++ {
		if swag.IsZero(m.DiskPoolPricing[i]) { // not required
			continue
		}

		if m.DiskPoolPricing[i] != nil {
			if err := m.DiskPoolPricing[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("diskPoolPricing" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("diskPoolPricing" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VMDataCenter) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *VMDataCenter) validateIPV4PriceHr(formats strfmt.Registry) error {
	if swag.IsZero(m.IPV4PriceHr) { // not required
		return nil
	}

	if m.IPV4PriceHr != nil {
		if err := m.IPV4PriceHr.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ipv4PriceHr")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ipv4PriceHr")
			}
			return err
		}
	}

	return nil
}

func (m *VMDataCenter) validateNetworkPricing(formats strfmt.Registry) error {
	if swag.IsZero(m.NetworkPricing) { // not required
		return nil
	}

	for i := 0; i < len(m.NetworkPricing); i++ {
		if swag.IsZero(m.NetworkPricing[i]) { // not required
			continue
		}

		if m.NetworkPricing[i] != nil {
			if err := m.NetworkPricing[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("networkPricing" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("networkPricing" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VMDataCenter) validateRegionID(formats strfmt.Registry) error {

	if err := validate.Required("regionId", "body", m.RegionID); err != nil {
		return err
	}

	return nil
}

func (m *VMDataCenter) validateRenewableEnergy(formats strfmt.Registry) error {

	if err := validate.Required("renewableEnergy", "body", m.RenewableEnergy); err != nil {
		return err
	}

	return nil
}

func (m *VMDataCenter) validateSupplierName(formats strfmt.Registry) error {

	if err := validate.Required("supplierName", "body", m.SupplierName); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this VM data center based on the context it is used
func (m *VMDataCenter) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDiskPoolPricing(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIPV4PriceHr(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNetworkPricing(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VMDataCenter) contextValidateDiskPoolPricing(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DiskPoolPricing); i++ {

		if m.DiskPoolPricing[i] != nil {

			if swag.IsZero(m.DiskPoolPricing[i]) { // not required
				return nil
			}

			if err := m.DiskPoolPricing[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("diskPoolPricing" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("diskPoolPricing" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VMDataCenter) contextValidateIPV4PriceHr(ctx context.Context, formats strfmt.Registry) error {

	if m.IPV4PriceHr != nil {

		if swag.IsZero(m.IPV4PriceHr) { // not required
			return nil
		}

		if err := m.IPV4PriceHr.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ipv4PriceHr")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ipv4PriceHr")
			}
			return err
		}
	}

	return nil
}

func (m *VMDataCenter) contextValidateNetworkPricing(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NetworkPricing); i++ {

		if m.NetworkPricing[i] != nil {

			if swag.IsZero(m.NetworkPricing[i]) { // not required
				return nil
			}

			if err := m.NetworkPricing[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("networkPricing" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("networkPricing" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *VMDataCenter) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VMDataCenter) UnmarshalBinary(b []byte) error {
	var res VMDataCenter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
