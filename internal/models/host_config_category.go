// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HostConfigCategory host config category
//
// swagger:model HostConfigCategory
type HostConfigCategory struct {

	// count Vm available
	// Required: true
	CountVMAvailable *int32 `json:"countVmAvailable"`

	// cpu model
	// Required: true
	CPUModel *string `json:"cpuModel"`

	// data center Id
	// Required: true
	DataCenterID *string `json:"dataCenterId"`

	// gpu model
	// Required: true
	GpuModel *string `json:"gpuModel"`

	// gpu price hr
	// Required: true
	GpuPriceHr *Decimal `json:"gpuPriceHr"`

	// id
	// Required: true
	ID *string `json:"id"`

	// ipv4 price hr
	// Required: true
	IPV4PriceHr *Decimal `json:"ipv4PriceHr"`

	// machine type
	// Required: true
	MachineType *string `json:"machineType"`

	// memory gib price hr
	// Required: true
	MemoryGibPriceHr *Decimal `json:"memoryGibPriceHr"`

	// renewable energy
	// Required: true
	RenewableEnergy *bool `json:"renewableEnergy"`

	// storage gib price hr
	// Required: true
	StorageGibPriceHr *Decimal `json:"storageGibPriceHr"`

	// total gpu price hr
	// Required: true
	TotalGpuPriceHr *Decimal `json:"totalGpuPriceHr"`

	// total memory price hr
	// Required: true
	TotalMemoryPriceHr *Decimal `json:"totalMemoryPriceHr"`

	// total price hr
	// Required: true
	TotalPriceHr *Decimal `json:"totalPriceHr"`

	// total storage price hr
	// Required: true
	TotalStoragePriceHr *Decimal `json:"totalStoragePriceHr"`

	// total vcpu price hr
	// Required: true
	TotalVcpuPriceHr *Decimal `json:"totalVcpuPriceHr"`

	// vcpu price hr
	// Required: true
	VcpuPriceHr *Decimal `json:"vcpuPriceHr"`
}

// Validate validates this host config category
func (m *HostConfigCategory) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCountVMAvailable(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCPUModel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDataCenterID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGpuModel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGpuPriceHr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIPV4PriceHr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMachineType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemoryGibPriceHr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRenewableEnergy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorageGibPriceHr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalGpuPriceHr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalMemoryPriceHr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalPriceHr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalStoragePriceHr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalVcpuPriceHr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVcpuPriceHr(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HostConfigCategory) validateCountVMAvailable(formats strfmt.Registry) error {

	if err := validate.Required("countVmAvailable", "body", m.CountVMAvailable); err != nil {
		return err
	}

	return nil
}

func (m *HostConfigCategory) validateCPUModel(formats strfmt.Registry) error {

	if err := validate.Required("cpuModel", "body", m.CPUModel); err != nil {
		return err
	}

	return nil
}

func (m *HostConfigCategory) validateDataCenterID(formats strfmt.Registry) error {

	if err := validate.Required("dataCenterId", "body", m.DataCenterID); err != nil {
		return err
	}

	return nil
}

func (m *HostConfigCategory) validateGpuModel(formats strfmt.Registry) error {

	if err := validate.Required("gpuModel", "body", m.GpuModel); err != nil {
		return err
	}

	return nil
}

func (m *HostConfigCategory) validateGpuPriceHr(formats strfmt.Registry) error {

	if err := validate.Required("gpuPriceHr", "body", m.GpuPriceHr); err != nil {
		return err
	}

	if m.GpuPriceHr != nil {
		if err := m.GpuPriceHr.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gpuPriceHr")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gpuPriceHr")
			}
			return err
		}
	}

	return nil
}

func (m *HostConfigCategory) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *HostConfigCategory) validateIPV4PriceHr(formats strfmt.Registry) error {

	if err := validate.Required("ipv4PriceHr", "body", m.IPV4PriceHr); err != nil {
		return err
	}

	if m.IPV4PriceHr != nil {
		if err := m.IPV4PriceHr.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ipv4PriceHr")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ipv4PriceHr")
			}
			return err
		}
	}

	return nil
}

func (m *HostConfigCategory) validateMachineType(formats strfmt.Registry) error {

	if err := validate.Required("machineType", "body", m.MachineType); err != nil {
		return err
	}

	return nil
}

func (m *HostConfigCategory) validateMemoryGibPriceHr(formats strfmt.Registry) error {

	if err := validate.Required("memoryGibPriceHr", "body", m.MemoryGibPriceHr); err != nil {
		return err
	}

	if m.MemoryGibPriceHr != nil {
		if err := m.MemoryGibPriceHr.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("memoryGibPriceHr")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("memoryGibPriceHr")
			}
			return err
		}
	}

	return nil
}

func (m *HostConfigCategory) validateRenewableEnergy(formats strfmt.Registry) error {

	if err := validate.Required("renewableEnergy", "body", m.RenewableEnergy); err != nil {
		return err
	}

	return nil
}

func (m *HostConfigCategory) validateStorageGibPriceHr(formats strfmt.Registry) error {

	if err := validate.Required("storageGibPriceHr", "body", m.StorageGibPriceHr); err != nil {
		return err
	}

	if m.StorageGibPriceHr != nil {
		if err := m.StorageGibPriceHr.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storageGibPriceHr")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("storageGibPriceHr")
			}
			return err
		}
	}

	return nil
}

func (m *HostConfigCategory) validateTotalGpuPriceHr(formats strfmt.Registry) error {

	if err := validate.Required("totalGpuPriceHr", "body", m.TotalGpuPriceHr); err != nil {
		return err
	}

	if m.TotalGpuPriceHr != nil {
		if err := m.TotalGpuPriceHr.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("totalGpuPriceHr")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("totalGpuPriceHr")
			}
			return err
		}
	}

	return nil
}

func (m *HostConfigCategory) validateTotalMemoryPriceHr(formats strfmt.Registry) error {

	if err := validate.Required("totalMemoryPriceHr", "body", m.TotalMemoryPriceHr); err != nil {
		return err
	}

	if m.TotalMemoryPriceHr != nil {
		if err := m.TotalMemoryPriceHr.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("totalMemoryPriceHr")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("totalMemoryPriceHr")
			}
			return err
		}
	}

	return nil
}

func (m *HostConfigCategory) validateTotalPriceHr(formats strfmt.Registry) error {

	if err := validate.Required("totalPriceHr", "body", m.TotalPriceHr); err != nil {
		return err
	}

	if m.TotalPriceHr != nil {
		if err := m.TotalPriceHr.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("totalPriceHr")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("totalPriceHr")
			}
			return err
		}
	}

	return nil
}

func (m *HostConfigCategory) validateTotalStoragePriceHr(formats strfmt.Registry) error {

	if err := validate.Required("totalStoragePriceHr", "body", m.TotalStoragePriceHr); err != nil {
		return err
	}

	if m.TotalStoragePriceHr != nil {
		if err := m.TotalStoragePriceHr.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("totalStoragePriceHr")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("totalStoragePriceHr")
			}
			return err
		}
	}

	return nil
}

func (m *HostConfigCategory) validateTotalVcpuPriceHr(formats strfmt.Registry) error {

	if err := validate.Required("totalVcpuPriceHr", "body", m.TotalVcpuPriceHr); err != nil {
		return err
	}

	if m.TotalVcpuPriceHr != nil {
		if err := m.TotalVcpuPriceHr.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("totalVcpuPriceHr")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("totalVcpuPriceHr")
			}
			return err
		}
	}

	return nil
}

func (m *HostConfigCategory) validateVcpuPriceHr(formats strfmt.Registry) error {

	if err := validate.Required("vcpuPriceHr", "body", m.VcpuPriceHr); err != nil {
		return err
	}

	if m.VcpuPriceHr != nil {
		if err := m.VcpuPriceHr.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vcpuPriceHr")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vcpuPriceHr")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this host config category based on the context it is used
func (m *HostConfigCategory) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateGpuPriceHr(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIPV4PriceHr(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMemoryGibPriceHr(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStorageGibPriceHr(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTotalGpuPriceHr(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTotalMemoryPriceHr(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTotalPriceHr(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTotalStoragePriceHr(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTotalVcpuPriceHr(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVcpuPriceHr(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HostConfigCategory) contextValidateGpuPriceHr(ctx context.Context, formats strfmt.Registry) error {

	if m.GpuPriceHr != nil {

		if err := m.GpuPriceHr.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gpuPriceHr")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gpuPriceHr")
			}
			return err
		}
	}

	return nil
}

func (m *HostConfigCategory) contextValidateIPV4PriceHr(ctx context.Context, formats strfmt.Registry) error {

	if m.IPV4PriceHr != nil {

		if err := m.IPV4PriceHr.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ipv4PriceHr")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ipv4PriceHr")
			}
			return err
		}
	}

	return nil
}

func (m *HostConfigCategory) contextValidateMemoryGibPriceHr(ctx context.Context, formats strfmt.Registry) error {

	if m.MemoryGibPriceHr != nil {

		if err := m.MemoryGibPriceHr.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("memoryGibPriceHr")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("memoryGibPriceHr")
			}
			return err
		}
	}

	return nil
}

func (m *HostConfigCategory) contextValidateStorageGibPriceHr(ctx context.Context, formats strfmt.Registry) error {

	if m.StorageGibPriceHr != nil {

		if err := m.StorageGibPriceHr.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storageGibPriceHr")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("storageGibPriceHr")
			}
			return err
		}
	}

	return nil
}

func (m *HostConfigCategory) contextValidateTotalGpuPriceHr(ctx context.Context, formats strfmt.Registry) error {

	if m.TotalGpuPriceHr != nil {

		if err := m.TotalGpuPriceHr.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("totalGpuPriceHr")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("totalGpuPriceHr")
			}
			return err
		}
	}

	return nil
}

func (m *HostConfigCategory) contextValidateTotalMemoryPriceHr(ctx context.Context, formats strfmt.Registry) error {

	if m.TotalMemoryPriceHr != nil {

		if err := m.TotalMemoryPriceHr.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("totalMemoryPriceHr")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("totalMemoryPriceHr")
			}
			return err
		}
	}

	return nil
}

func (m *HostConfigCategory) contextValidateTotalPriceHr(ctx context.Context, formats strfmt.Registry) error {

	if m.TotalPriceHr != nil {

		if err := m.TotalPriceHr.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("totalPriceHr")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("totalPriceHr")
			}
			return err
		}
	}

	return nil
}

func (m *HostConfigCategory) contextValidateTotalStoragePriceHr(ctx context.Context, formats strfmt.Registry) error {

	if m.TotalStoragePriceHr != nil {

		if err := m.TotalStoragePriceHr.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("totalStoragePriceHr")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("totalStoragePriceHr")
			}
			return err
		}
	}

	return nil
}

func (m *HostConfigCategory) contextValidateTotalVcpuPriceHr(ctx context.Context, formats strfmt.Registry) error {

	if m.TotalVcpuPriceHr != nil {

		if err := m.TotalVcpuPriceHr.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("totalVcpuPriceHr")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("totalVcpuPriceHr")
			}
			return err
		}
	}

	return nil
}

func (m *HostConfigCategory) contextValidateVcpuPriceHr(ctx context.Context, formats strfmt.Registry) error {

	if m.VcpuPriceHr != nil {

		if err := m.VcpuPriceHr.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vcpuPriceHr")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vcpuPriceHr")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HostConfigCategory) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HostConfigCategory) UnmarshalBinary(b []byte) error {
	var res HostConfigCategory
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
