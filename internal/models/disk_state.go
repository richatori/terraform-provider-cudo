// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// DiskState disk state
//
// swagger:model DiskState
type DiskState string

func NewDiskState(value DiskState) *DiskState {
	return &value
}

// Pointer returns a pointer to a freshly-allocated DiskState.
func (m DiskState) Pointer() *DiskState {
	return &m
}

const (

	// DiskStateDISKSTATEINIT captures enum value "DISK_STATE_INIT"
	DiskStateDISKSTATEINIT DiskState = "DISK_STATE_INIT"

	// DiskStateDISKSTATEREADY captures enum value "DISK_STATE_READY"
	DiskStateDISKSTATEREADY DiskState = "DISK_STATE_READY"

	// DiskStateDISKSTATEUSED captures enum value "DISK_STATE_USED"
	DiskStateDISKSTATEUSED DiskState = "DISK_STATE_USED"

	// DiskStateDISKSTATEDISABLED captures enum value "DISK_STATE_DISABLED"
	DiskStateDISKSTATEDISABLED DiskState = "DISK_STATE_DISABLED"

	// DiskStateDISKSTATELOCKED captures enum value "DISK_STATE_LOCKED"
	DiskStateDISKSTATELOCKED DiskState = "DISK_STATE_LOCKED"

	// DiskStateDISKSTATEERROR captures enum value "DISK_STATE_ERROR"
	DiskStateDISKSTATEERROR DiskState = "DISK_STATE_ERROR"

	// DiskStateDISKSTATECLONE captures enum value "DISK_STATE_CLONE"
	DiskStateDISKSTATECLONE DiskState = "DISK_STATE_CLONE"

	// DiskStateDISKSTATEDELETE captures enum value "DISK_STATE_DELETE"
	DiskStateDISKSTATEDELETE DiskState = "DISK_STATE_DELETE"
)

// for schema
var diskStateEnum []interface{}

func init() {
	var res []DiskState
	if err := json.Unmarshal([]byte(`["DISK_STATE_INIT","DISK_STATE_READY","DISK_STATE_USED","DISK_STATE_DISABLED","DISK_STATE_LOCKED","DISK_STATE_ERROR","DISK_STATE_CLONE","DISK_STATE_DELETE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		diskStateEnum = append(diskStateEnum, v)
	}
}

func (m DiskState) validateDiskStateEnum(path, location string, value DiskState) error {
	if err := validate.EnumCase(path, location, value, diskStateEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this disk state
func (m DiskState) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateDiskStateEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this disk state based on context it is used
func (m DiskState) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
