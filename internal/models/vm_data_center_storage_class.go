// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// VMDataCenterStorageClass VM data center storage class
//
// swagger:model VMDataCenter.StorageClass
type VMDataCenterStorageClass string

func NewVMDataCenterStorageClass(value VMDataCenterStorageClass) *VMDataCenterStorageClass {
	return &value
}

// Pointer returns a pointer to a freshly-allocated VMDataCenterStorageClass.
func (m VMDataCenterStorageClass) Pointer() *VMDataCenterStorageClass {
	return &m
}

const (

	// VMDataCenterStorageClassSTORAGECLASSUNKNOWN captures enum value "STORAGE_CLASS_UNKNOWN"
	VMDataCenterStorageClassSTORAGECLASSUNKNOWN VMDataCenterStorageClass = "STORAGE_CLASS_UNKNOWN"

	// VMDataCenterStorageClassSTORAGECLASSLOCAL captures enum value "STORAGE_CLASS_LOCAL"
	VMDataCenterStorageClassSTORAGECLASSLOCAL VMDataCenterStorageClass = "STORAGE_CLASS_LOCAL"

	// VMDataCenterStorageClassSTORAGECLASSNETWORK captures enum value "STORAGE_CLASS_NETWORK"
	VMDataCenterStorageClassSTORAGECLASSNETWORK VMDataCenterStorageClass = "STORAGE_CLASS_NETWORK"
)

// for schema
var vmDataCenterStorageClassEnum []interface{}

func init() {
	var res []VMDataCenterStorageClass
	if err := json.Unmarshal([]byte(`["STORAGE_CLASS_UNKNOWN","STORAGE_CLASS_LOCAL","STORAGE_CLASS_NETWORK"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		vmDataCenterStorageClassEnum = append(vmDataCenterStorageClassEnum, v)
	}
}

func (m VMDataCenterStorageClass) validateVMDataCenterStorageClassEnum(path, location string, value VMDataCenterStorageClass) error {
	if err := validate.EnumCase(path, location, value, vmDataCenterStorageClassEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this VM data center storage class
func (m VMDataCenterStorageClass) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateVMDataCenterStorageClassEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this VM data center storage class based on context it is used
func (m VMDataCenterStorageClass) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
