// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserPermission user permission
//
// swagger:model UserPermission
type UserPermission struct {

	// permission role
	// Required: true
	PermissionRole *Role `json:"permissionRole"`

	// role
	// Required: true
	Role *string `json:"role"`

	// user email
	// Required: true
	UserEmail *string `json:"userEmail"`

	// user Id
	// Required: true
	UserID *string `json:"userId"`

	// user picture
	// Required: true
	UserPicture *string `json:"userPicture"`
}

// Validate validates this user permission
func (m *UserPermission) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePermissionRole(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRole(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserPicture(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserPermission) validatePermissionRole(formats strfmt.Registry) error {

	if err := validate.Required("permissionRole", "body", m.PermissionRole); err != nil {
		return err
	}

	if err := validate.Required("permissionRole", "body", m.PermissionRole); err != nil {
		return err
	}

	if m.PermissionRole != nil {
		if err := m.PermissionRole.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("permissionRole")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("permissionRole")
			}
			return err
		}
	}

	return nil
}

func (m *UserPermission) validateRole(formats strfmt.Registry) error {

	if err := validate.Required("role", "body", m.Role); err != nil {
		return err
	}

	return nil
}

func (m *UserPermission) validateUserEmail(formats strfmt.Registry) error {

	if err := validate.Required("userEmail", "body", m.UserEmail); err != nil {
		return err
	}

	return nil
}

func (m *UserPermission) validateUserID(formats strfmt.Registry) error {

	if err := validate.Required("userId", "body", m.UserID); err != nil {
		return err
	}

	return nil
}

func (m *UserPermission) validateUserPicture(formats strfmt.Registry) error {

	if err := validate.Required("userPicture", "body", m.UserPicture); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this user permission based on the context it is used
func (m *UserPermission) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePermissionRole(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserPermission) contextValidatePermissionRole(ctx context.Context, formats strfmt.Registry) error {

	if m.PermissionRole != nil {

		if err := m.PermissionRole.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("permissionRole")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("permissionRole")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserPermission) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserPermission) UnmarshalBinary(b []byte) error {
	var res UserPermission
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
